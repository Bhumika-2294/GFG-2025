class Solution {
  public:
    void getLeft(Node* root,vector<int>& ans){
        Node* node=root->left;
        while(node){
            if(node->left || node->right){
                ans.push_back(node->data);
            }
            node=(node->left)? node->left: node->right;
        }
    }
    void getLeaf(Node* root,vector<int>& ans){
        if(!root)return;
        getLeaf(root->left,ans);
        if(!root->right && !root->left)ans.push_back(root->data);
        getLeaf(root->right,ans);
    }
    void getRight(Node* root,vector<int>& ans){
        Node* node=root->right;
        vector<int>temp;
        while(node){
            if(node->left || node->right){
                temp.push_back(node->data);
            }
            node=(node->right)? node->right: node->left;
        }
        for(int i=temp.size()-1;i>=0;i--)ans.push_back(temp[i]);
    }
    
    vector<int> boundaryTraversal(Node *root) {
        vector<int>ans;
        if(!root)return ans;
        if(root->left || root->right)ans.push_back(root->data);
        
        getLeft(root,ans);
        getLeaf(root,ans);
        getRight(root,ans);
        
        return ans;
    }
};
