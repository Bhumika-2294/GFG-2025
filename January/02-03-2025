
class Solution {
  public:
    vector<int> maxOfSubarrays(vector<int>& nums, int k) {
        // code here
        priority_queue<pair<int, int>> maxHeap; // Max Heap (stores {value, index})
        vector<int> result;
    
        for (int i = 0; i < nums.size(); i++) {
            // Insert the current element into the heap
            maxHeap.push({nums[i], i});
    
            // Remove elements that are out of the current window
            while (!maxHeap.empty() && maxHeap.top().second <= i - k) {
                maxHeap.pop();
            }
    
            // Start adding results once we reach a valid window
            if (i >= k - 1) {
                result.push_back(maxHeap.top().first); // Max element in window
            }
        }
    
        return result;
    }
};bv
