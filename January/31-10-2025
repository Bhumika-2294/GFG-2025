class Solution {
  public:

    // BFS function to find shortest cycle starting from node 'src'
    int bfs(int src, vector<vector<int>> &adj, int V) {
        vector<int> dist(V, (int)1e9);
        vector<int> par(V, -1);
        queue<int> q;

        dist[src] = 0;
        q.push(src);

        int ans = INT_MAX;

        while (!q.empty()) {
            int x = q.front();
            q.pop();

            for (int child : adj[x]) {

                // If not visited yet
                if (dist[child] == (int)1e9) {
                    dist[child] = dist[x] + 1;
                    par[child] = x;
                    q.push(child);
                }

                // If visited and not parent
                else if (par[x] != child && par[child] != x)
                    ans = min(ans, dist[x] + dist[child] + 1);
            }
        }

        return ans;
    }

    int shortCycle(int V, vector<vector<int>> &edges) {

        // convert edge list to adjacency list
        vector<vector<int>> adj(V);
        for (auto &e : edges) {
            int u = e[0], v = e[1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        int ans = INT_MAX;

        // Run BFS from every vertex
        for (int i = 0; i < V; i++) {
            ans = min(ans, bfs(i, adj, V));
        }

        // If no cycle exists
        if (ans == INT_MAX)
            return -1;
        return ans;
    }
};
