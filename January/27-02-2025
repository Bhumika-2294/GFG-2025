
class Solution {
  public:
      stack<pair<int,int> > st;
    int curr_mini ;
  public:
    Solution() {
        curr_mini = INT_MAX; 
    }

    // Add an element to the top of Stack
    void push(int x) {
        curr_mini = min(curr_mini,x);
        st.push({x,curr_mini});
    }

    // Remove the top element from the Stack
    void pop() {
        if(!st.empty()){
            if(curr_mini != st.top().second){
                st.pop();
            } else {
                st.pop();
                if(!st.empty()){
                    curr_mini = st.top().second;
                } else {
                    curr_mini = INT_MAX;
                }
            }
        }
    }

    // Returns top element of the Stack
    int peek() {
        return (!st.empty()) ? st.top().first : -1;
    }

    // Finds minimum element of Stack
    int getMin() {
        return (!st.empty()) ? st.top().second : -1;
  /*
    Solution() {
        // code here
    }

    // Add an element to the top of Stack
    void push(int x) {
        // code here
    }

    // Remove the top element from the Stack
    void pop() {
        // code here
    }

    // Returns top element of the Stack
    int peek() {
        // code here
    }

    // Finds minimum element of Stack
    int getMin() {
        // code here */
    }
};
